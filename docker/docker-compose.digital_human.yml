version: '3.8'

services:
  # Apache Jena Fuseki for RDF/Knowledge Graph
  jena-fuseki:
    image: stain/jena-fuseki:4.9.0
    container_name: digital_human_jena
    environment:
      - ADMIN_PASSWORD=${JENA_PASSWORD:-admin}
      - JVM_ARGS=-Xmx2g
    volumes:
      - jena_data:/fuseki
    ports:
      - "3030:3030"
    command: /jena-fuseki/fuseki-server --update --mem /digital_human
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3030/$/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: digital_human_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Digital Human Backend
  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.digital_human
    container_name: digital_human_backend
    environment:
      - JENA_ENDPOINT=http://jena-fuseki:3030/digital_human
      - JENA_USER=admin
      - JENA_PASSWORD=${JENA_PASSWORD:-admin}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      - NVIDIA_API_KEY=${NVIDIA_API_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-generate-a-secure-key}
      - ENVIRONMENT=production
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - ../models:/app/models
    ports:
      - "8000:8000"
    depends_on:
      jena-fuseki:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Digital Human Frontend
  frontend:
    image: nginx:alpine
    container_name: digital_human_frontend
    volumes:
      - ../src/aiq/digital_human/ui/frontend:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend

  # Neo4j for Graph Analytics (optional, complementary to Jena)
  neo4j:
    image: neo4j:5.15
    container_name: digital_human_neo4j
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD:-changeme}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    healthcheck:
      test: ["CMD", "neo4j", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: digital_human_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: digital_human_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

  # Logging - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: digital_human_elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"

  # Logging - Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: digital_human_logstash
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch

  # Logging - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: digital_human_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  # GraphDB for additional RDF capabilities (optional)
  graphdb:
    image: ontotext/graphdb:10.5.0
    container_name: digital_human_graphdb
    environment:
      - GDB_JAVA_OPTS=-Xmx2g -Xms1g
    volumes:
      - graphdb_data:/opt/graphdb/home
    ports:
      - "7200:7200"

volumes:
  jena_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  graphdb_data:

networks:
  default:
    name: digital_human_network