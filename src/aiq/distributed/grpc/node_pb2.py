# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: node.proto
"""Generated protocol buffer code."""

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))

# Simplified stubs for the protobuf classes

class NodeInfo(object):
    def __init__(self, node_id="", hostname="", port=0, total_gpus=0, 
                 available_gpus=0, gpu_memory=0, cpu_available=0.0, status=""):
        self.node_id = node_id
        self.hostname = hostname
        self.port = port
        self.total_gpus = total_gpus
        self.available_gpus = available_gpus
        self.gpu_memory = gpu_memory
        self.cpu_available = cpu_available
        self.status = status
    
    def SerializeToString(self):
        return str(self.__dict__).encode()
    
    @classmethod
    def FromString(cls, data):
        import ast
        d = ast.literal_eval(data.decode())
        return cls(**d)

class RegisterRequest(object):
    def __init__(self):
        self.node_info = NodeInfo()
    
    def SerializeToString(self):
        return str({"node_info": self.node_info.__dict__}).encode()

class RegisterResponse(object):
    def __init__(self, success=False, message="", assigned_id=""):
        self.success = success
        self.message = message
        self.assigned_id = assigned_id
    
    def SerializeToString(self):
        return str(self.__dict__).encode()

class TaskRequest(object):
    def __init__(self, task_id="", task_data=b"", task_type="", metadata=None):
        self.task_id = task_id
        self.task_data = task_data
        self.task_type = task_type
        self.metadata = metadata or {}
    
    def SerializeToString(self):
        return str(self.__dict__).encode()

class TaskResponse(object):
    def __init__(self, task_id="", result=b"", status="", error_message=""):
        self.task_id = task_id
        self.result = result
        self.status = status
        self.error_message = error_message
    
    def SerializeToString(self):
        return str(self.__dict__).encode()

class StatusRequest(object):
    def __init__(self, node_id=""):
        self.node_id = node_id
    
    def SerializeToString(self):
        return str(self.__dict__).encode()

class StatusResponse(object):
    def __init__(self, node_id="", status="", node_info=None, active_tasks=0):
        self.node_id = node_id
        self.status = status
        self.node_info = node_info or NodeInfo()
        self.active_tasks = active_tasks
    
    def SerializeToString(self):
        return str(self.__dict__).encode()

class HeartbeatRequest(object):
    def __init__(self, node_id="", timestamp=0):
        self.node_id = node_id
        self.timestamp = timestamp
    
    def SerializeToString(self):
        return str(self.__dict__).encode()

class HeartbeatResponse(object):
    def __init__(self, acknowledged=False, server_timestamp=0):
        self.acknowledged = acknowledged
        self.server_timestamp = server_timestamp
    
    def SerializeToString(self):
        return str(self.__dict__).encode()

# Service descriptors (simplified)
class NodeServiceStub(object):
    def __init__(self, channel):
        self.channel = channel
    
    def RegisterNode(self, request, timeout=None):
        return RegisterResponse(success=True, message="OK")
    
    def SubmitTask(self, request, timeout=None):
        return TaskResponse(task_id=request.task_id, status="completed")
    
    def GetNodeStatus(self, request, timeout=None):
        return StatusResponse(node_id=request.node_id, status="active")
    
    def Heartbeat(self, request, timeout=None):
        return HeartbeatResponse(acknowledged=True)