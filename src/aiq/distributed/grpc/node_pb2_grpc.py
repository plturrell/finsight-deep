# -*- coding: utf-8 -*-
# Generated by gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

from . import node_pb2 as node__pb2


class NodeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterNode = channel.unary_unary(
                '/aiq.distributed.NodeService/RegisterNode',
                request_serializer=node__pb2.RegisterRequest.SerializeToString,
                response_deserializer=node__pb2.RegisterResponse.FromString,
                )
        self.SubmitTask = channel.unary_unary(
                '/aiq.distributed.NodeService/SubmitTask',
                request_serializer=node__pb2.TaskRequest.SerializeToString,
                response_deserializer=node__pb2.TaskResponse.FromString,
                )
        self.GetNodeStatus = channel.unary_unary(
                '/aiq.distributed.NodeService/GetNodeStatus',
                request_serializer=node__pb2.StatusRequest.SerializeToString,
                response_deserializer=node__pb2.StatusResponse.FromString,
                )
        self.Heartbeat = channel.unary_unary(
                '/aiq.distributed.NodeService/Heartbeat',
                request_serializer=node__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=node__pb2.HeartbeatResponse.FromString,
                )


class NodeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


# Add the missing services
class NodeManagerServicer(object):
    """Service for managing distributed nodes"""

    def RegisterNode(self, request, context):
        """Register a new node with the manager"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActiveNodes(self, request, context):
        """Get list of active nodes"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignTask(self, request, context):
        """Assign task to a node"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


class TaskExecutorServicer(object):
    """Service for executing tasks on worker nodes"""

    def ExecuteTask(self, request, context):
        """Execute a task on this worker"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskStatus(self, request, context):
        """Get status of a running task"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelTask(self, request, context):
        """Cancel a running task"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterNode': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterNode,
                    request_deserializer=lambda x: node__pb2.RegisterRequest(),
                    response_serializer=node__pb2.RegisterResponse.SerializeToString,
            ),
            'SubmitTask': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTask,
                    request_deserializer=lambda x: node__pb2.TaskRequest(),
                    response_serializer=node__pb2.TaskResponse.SerializeToString,
            ),
            'GetNodeStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeStatus,
                    request_deserializer=lambda x: node__pb2.StatusRequest(),
                    response_serializer=node__pb2.StatusResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=lambda x: node__pb2.HeartbeatRequest(),
                    response_serializer=node__pb2.HeartbeatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aiq.distributed.NodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# Add missing client stubs
class TaskExecutorStub(object):
    """Client stub for TaskExecutor service"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteTask = channel.unary_unary(
                '/aiq.distributed.TaskExecutor/ExecuteTask',
                request_serializer=node__pb2.TaskRequest.SerializeToString,
                response_deserializer=node__pb2.TaskResponse.FromString,
                )
        self.GetTaskStatus = channel.unary_unary(
                '/aiq.distributed.TaskExecutor/GetTaskStatus',
                request_serializer=node__pb2.StatusRequest.SerializeToString,
                response_deserializer=node__pb2.StatusResponse.FromString,
                )
        self.CancelTask = channel.unary_unary(
                '/aiq.distributed.TaskExecutor/CancelTask',
                request_serializer=node__pb2.TaskRequest.SerializeToString,
                response_deserializer=node__pb2.TaskResponse.FromString,
                )


 # This class is part of an EXPERIMENTAL API.
class NodeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aiq.distributed.NodeService/RegisterNode',
            node__pb2.RegisterRequest.SerializeToString,
            lambda x: node__pb2.RegisterResponse(),
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)